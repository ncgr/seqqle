#!/bin/bash

#########################################################################################
#
# Run Blast
#
# Author:   Ken Seal - NCGR
#
# Purpose:  Execute blast on a dataset retrieved from the MySQL table seqqles 
#           and store the blast result set in the table seqqle_hits. See the MySQL
#           database seqqle_core and the Rails app seqqle for more information. 
#
#           If the script generates a non-zero exit status, the error is logged 
#           in $LOG_FILE.
#
#           This script executes the pre processing code for seqqle.
#
#########################################################################################

###------------------------- Script Variables ----------------------------------------###

## Error Codes ##
INVALID_PARAMS=65
MYSQL_ERR=66
TYPE_ERR=67
BLAST_EMPTY=68
SEQ_EMPTY=69
SQL_EMPTY=70
FASTA_ERROR=71
BINARY_ERROR=73

## Script Variables ##
ID=
HASH=
ENV=
LOG_DIR=
DB=
DB_HOST=
DB_USER=
DB_PASS=
BLAST_DB=
THREADS=
BLAST_CMD=
SWISSPROT=

## Sequence Types ##
AA="amino_acid"
NA="nucleic_acid"

###-------------------------- End Script Variables -----------------------------------###


###-------------------------- Functions ----------------------------------------------###

##
# Usage
#
function usage() {
cat <<-'USAGE'
    Seqqle Run Blast

    usage: run-blast: -i database record id -g hash -e environment 
        -l path to log file -d database -k database host -u database user
        -p database pass -b path to blast database -t number of threads 
        -c blast command -s number swissprot hits
	 
    -i database record id          Primary ID for database lookup.
    -g hash                        Hash to ensure unique filename.
    -e environment                 Rails environment - developemnt or production.
    -l log directory               Path to log directory.
    -d database                    Name of the database.
    -k database host               IP address or domain name of database server.
    -u database user               Database username.
    -p database password           Database password.
    -b path to blast database      Path to Blast database.
    -t number of threads           Number of Blast threads.
    -c blast command               1 = Blastall (legacy Blast); 2 = Blastplus
    -s number swissprot hists      Number of Swissprot hits to keep.
    (-h)                           Display this message.

    License:
    MIT

    Author:
    Ken Seal - <http://ncgr.org>
USAGE
}

##
# Set the tmp directory.
#
function set_tmp_dir() {
    TMP_DIR="$LOG_DIR"
	# Create the directory if it doesn't exist.
	if [ ! -d $TMP_DIR  ]; then
	    mkdir $TMP_DIR
		chmod g+w $TMP_DIR
    fi
}

##
# Error exit function.
# Remove all tmp files, log the error and exit.
#
function exit_on_error() {
    LOGFILE=${TMP_DIR}run-blast.log
	rm ${TMP_DIR}${HASH}*;
	echo "`date`	ERROR #${EXIT_VAL}" >> $LOGFILE;
	exit $EXIT_VAL;
}

##
# Make sure the user has the necessary binaries installed and accessible.
#
function check_binaries() {
    binaries=( seqret mysql blastall tblastn blastp blastn blastx )
    
    # Check binaries per blast cmd.
    if [ $BLAST_CMD == 1 ]; then
        unset binaries[3]
        unset binaries[4]
        unset binaries[5]
        unset binaries[6]
    fi
    if [ $BLAST_CMD == 2 ]; then
        unset binaries[2]
    fi

    for b in $binaries; do
        hash "$b"
        if [ $? -gt 0 ]; then
            exit $BINARY_ERROR;
        fi
    done
}

##
# Execute legacy blastall
#
function execute_blastall() {
	# Command to execute blast for amino acids.
	if [ $TYPE == $AA ]; then
		
		# Blast aa sequence against nt targets.
		cat ${TMP_DIR}${HASH}.fa | blastall \
			-p tblastn \
			-d "${tblastn[*]}" \
			-i stdin \
			-a $THREADS \
			-m 8 \
			-e 0.5e-10 > ${TMP_DIR}${HASH}.rep & \
		
		# Blast aa sequence against aa targets.
		cat ${TMP_DIR}${HASH}.fa | blastall \
			-p blastp \
			-d "${blastp[*]}" \
			-i stdin \
			-a $THREADS  \
			-m 8 \
			-e 0.5e-10 > ${TMP_DIR}${HASH}-swiss
	fi
	
	# Command to execute blast for nucleic acids.
	if [ $TYPE == $NA ]; then
		
		# Blast nt sequence against nt targets.
		cat ${TMP_DIR}${HASH}.fa | blastall \
			-p blastn \
			-d "${blastn[*]}" \
			-i stdin \
			-a $THREADS  \
			-m 8 \
			-e 0.5e-20 > ${TMP_DIR}${HASH}.rep & \
		
		# Blast nt sequence against aa targets.
		cat ${TMP_DIR}${HASH}.fa | blastall \
	       	-p blastx \
			-d "${blastx[*]}" \
			-i stdin \
			-a $THREADS  \
			-m 8 \
			-e 0.5e-20 > ${TMP_DIR}${HASH}-swiss
	fi

	wait $!

	top_swissprot_hits	

    check_blast_results
}

##
# We only want the top $SWISSPROT hits per query by bit score.
# This function is only called from execute_blastall. Blastplus
# takes care of this for us via -max_target_seqs.
#
function top_swissprot_hits() {
	if [ -s ${TMP_DIR}${HASH}-swiss ]; then
		
		# Grab the first query.
		query="`head -n1 ${TMP_DIR}${HASH}-swiss | awk -F"\t" '{ print $1 }'`"
	
		i=0
		# Loop through the file and add the hits by bit score to .rep.
		cat ${TMP_DIR}${HASH}-swiss | while read line; do
	   		# Current line query id.
	   		l_query="`echo $line | awk '{ print $1 }'`"
	
	   		# If the query ids match, store the line.
	   		if [[ $query == $l_query ]]; then
	   			let "i += 1"	
				if [ $i -le $SWISSPROT ]; then
					echo $line >> ${TMP_DIR}${HASH}.rep
				fi
	
	   		# Update vars and grab the first line of the next query.
	   		else
	   			query=$l_query
				i=0
	   			let "i += 1"	
				echo $line >> ${TMP_DIR}${HASH}.rep
	   		fi
		done
	fi
}

##
# Execute Blast Plus
#
function execute_blastplus() {
	# Command to execute blast for amino acids.
	if [ $TYPE == $AA ]; then
	
		# Blast aa sequence against nt targets.
		tblastn \
			-db "${tblastn[*]}" \
			-query ${TMP_DIR}${HASH}.fa \
			-outfmt 6 \
			-num_threads $THREADS  \
			-evalue 0.5e-10 \
			-out ${TMP_DIR}${HASH}.rep & \
	
		# Blast aa sequence against aa targets.
		blastp \
			-db "${blastp[*]}" \
			-query ${TMP_DIR}${HASH}.fa \
			-outfmt 6 \
			-num_threads $THREADS \
			-evalue 0.5e-10 \
			-max_target_seqs $SWISSPROT \
			-out ${TMP_DIR}${HASH}-swiss
		
	fi
	
	# Command to execute blast for nucleic acids.
	if [ $TYPE == $NA ]; then

		# Blast nt sequence against nt targets.
		blastn \
			-db "${blastn[*]}" \
			-query ${TMP_DIR}${HASH}.fa \
			-outfmt 6 \
			-num_threads $THREADS \
			-evalue 0.5e-20 \
			-out ${TMP_DIR}${HASH}.rep & \
	
		# Blast nt sequence against aa targets.
		blastx \
			-db "${blastx[*]}" \
			-query ${TMP_DIR}${HASH}.fa \
			-outfmt 6 \
			-num_threads $THREADS \
			-evalue 0.5e-20 \
			-max_target_seqs $SWISSPROT \
			-out ${TMP_DIR}${HASH}-swiss
	
	fi

	wait $!
	
	# Combine datasets
	cat ${TMP_DIR}${HASH}-swiss >> ${TMP_DIR}${HASH}.rep

    check_blast_results
}

##
# Check blast results.
#
function check_blast_results() {
    if [ ! -s ${TMP_DIR}${HASH}.rep ]; then
	    EXIT_VAL=$BLAST_EMPTY
	    exit_on_error
    fi
}

##
# Format SQL for db INSERT.
#
function format_sql() {
	# More awk goodness to convert the blast results to SQL. Nerd cred rising.
	# If the query was not set in the FASTA header, print Local or leave it alone.
	# All commas must be replaced in query (see gsub below) because the method  find_neighbors
	# on the Rails side (see seqqles_controller.rb) splits neighbors and query via a comma.
	cat ${TMP_DIR}${HASH}.rep | awk '{
		{ 
			print "INSERT into seqqle_hits (seqqle_id, query, hit, percent, alignment_len, \
			query_from, query_to, hit_from, hit_to, e_val, bit_score) values ('$ID',"; 
		} 
		{ 
			gsub(/[,]/, "-", $1);
			if ( $1 ~ /EMBOSS_[0-9]*/ )
				$1 = "Local" 
		}
		{ 
			printf "\"%s\", \"%s\", %.2f, %d, %d, %d, %d, %d, %d, %d", $1, $2, $3, $4, $7, $8, $9, $10, $11, $12 
		}
		{ 
			print ");"; 
		}
	}' >> ${TMP_DIR}${HASH}.sql

    # Return if SQL is empty and log the error.
    if [ ! -s ${TMP_DIR}${HASH}.sql ]; then
	    EXIT_VAL=$SQL_EMPTY
	    exit_on_error
    fi
}

###------------------------- End Functions ------------------------------------------###


###------------------------- Begin run-blast ----------------------------------------###

if [ $# -ge 1 ]; then
    # Note the leading : below.
    while getopts ':i:g:e:l:d:k:u:p:b:t:c:s:h' OPTION; do
        case $OPTION in
        i)  ID="$OPTARG"
            ;;
        g)  HASH="$OPTARG"
            ;;
        e)  ENV="$OPTARG"
            ;;
        l)  LOG_DIR="$OPTARG"
            ;;
        d)  DB="$OPTARG"
            ;;
        k)  DB_HOST="$OPTARG"  
            ;;
        u)  DB_USER="$OPTARG"  
            ;;
        p)  DB_PASS="$OPTARG"
            ;;
        b)  BLAST_DB="$OPTARG"
            ;;
        t)  THREADS="$OPTARG"
            ;;
        c)  BLAST_CMD="$OPTARG"
            ;;
        s)  SWISSPROT="$OPTARG"
            ;;
        h)  usage
            exit 0
            ;;
        \:) printf "argument missing from -%s option\n" $OPTARG
            usage
            exit $INVALID_PARAMS
            ;;
        \?) printf "unknown option: -%s\n" $OPTARG
            usage
            exit $INVALID_PARAMS
            ;;
        esac
	done
shift $(($OPTIND - 1))
else
    echo ""
    echo "--> All options are required! <--"
    echo ""
    usage
    exit $INVALID_PARAMS
fi

# Dev time keeping.
if [ $ENV == "development" ]; then
    start_time=`date +%s.%N`
fi

set_tmp_dir

check_binaries

### Edit the arrays below for custom setup --------------------------------------###
#
# NOTE: Do not change $BLAST_DB.
#
## Blast DB ##
tblastn=( $BLAST_DB/gm_genome $BLAST_DB/mt_3_0_genome $BLAST_DB/mt_3_5_1_genome\ 
    $BLAST_DB/lj_genome $BLAST_DB/mt_affy_genechip_target )
blastp=( $BLAST_DB/swissprot_viridiplantae )
blastn=( $BLAST_DB/gm_genome $BLAST_DB/mt_3_0_genome $BLAST_DB/mt_3_5_1_genome\
	$BLAST_DB/lj_genome $BLAST_DB/mt_affy_genechip_target $BLAST_DB/ca_transcripts )
blastx=( $BLAST_DB/swissprot_viridiplantae )

### End Edit --------------------------------------------------------------------###

# Query data
qry="SELECT seqqles.seq, seqqles.seq_type FROM seqqles WHERE id = '$ID'"
echo $qry | mysql --batch -h$DB_HOST -u$DB_USER -p$DB_PASS $DB > ${TMP_DIR}${HASH}

# Make sure our SQL executed successfully.
if [[ ! -s ${TMP_DIR}${HASH} || $? -gt 0 ]]; then
	EXIT_VAL=$MYSQL_ERR
	exit_on_error
fi

# Read the MySQL dataset and set the sequence type.
TYPE=`tail -1 ${TMP_DIR}${HASH} | awk -F"\t" '{ print $2 }'`

if [ -z $TYPE ]; then
	EXIT_VAL=$TYPE_ERR
	exit_on_error
fi

# Read the MySQL dataset and write the sequence to file.
tail -1 ${TMP_DIR}${HASH} | sed -e's/\\n/\n/g' -e's/\\r//g' | awk -F"\t" '{ print $1 }' > ${TMP_DIR}${HASH}.seq 

# Make sure ${TMP_DIR}${HASH}.seq is set.
if [ ! -s ${TMP_DIR}${HASH}.seq ]; then
	EXIT_VAL=$SEQ_EMPTY
	exit_on_error
fi

# Force FASTA format.
seqret -filter -sformat pearson -osformat fasta < ${TMP_DIR}${HASH}.seq > ${TMP_DIR}${HASH}.fa

# If the FASTA sequence is not set, log the error and exit.
if [[ $? -gt 0 || ! -s ${TMP_DIR}${HASH}.fa ]]; then
	EXIT_VAL=$FASTA_ERROR
	exit_on_error
fi

# Execute Blast command
if [ $BLAST_CMD == 1 ]; then
	execute_blastall
elif [ $BLAST_CMD == 2 ]; then
	execute_blastplus
fi

# Format SQL for INSERT
format_sql

# MySQL INSERT
mysql -h$DB_HOST -u$DB_USER -p$DB_PASS $DB < ${TMP_DIR}${HASH}.sql

# Check MySQL INSERT
if [ $? -gt 0 ]; then
	EXIT_VAL=$MYSQL_ERR
	exit_on_error
fi

rm ${TMP_DIR}${HASH}*

# Script execution time for dev.
if [ $ENV == "development" ]; then
	end_time=`date +%s.%N`
	diff=$(echo "scale=4; $end_time-$start_time" | bc)
	echo "$diff $TYPE $BLASTCMD" >> ${TMP_DIR}time.log
fi

exit 0

###------------------------- EOF ----------------------------------------------------###
